package com.weidi.listener;

import java.util.Date;

import org.jivesoftware.smack.PacketListener;
import org.jivesoftware.smack.Roster;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.packet.Packet;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.util.StringUtils;

import android.content.Intent;
import android.util.Log;

import com.weidi.QApp;
import com.weidi.bean.Session;
import com.weidi.common.DateUtil;
import com.weidi.db.SessionDao;
import com.weidi.service.MsfService;
import com.weidi.util.Const;
import com.weidi.util.Logger;
import com.weidi.util.XmppUtil;

public class FriendsPacketListener implements PacketListener {
	private static String TAG = "FriendsPacketListener";
	private XMPPConnection con;
	MsfService context;
	private SessionDao sessionDao;
	
	public FriendsPacketListener(MsfService context) {
		this.context = context;
		sessionDao = new SessionDao(context);
	}
	private Session setSession(String to, String from, String msgtime) {
		Session session = new Session();
		session.setFrom(from);
		session.setTo(to);
		session.setNotReadCount("");// 未读消息数量
		session.setTime(msgtime);
		return session;
	}
	@Override
	public void processPacket(Packet packet) {
		Logger.i(TAG, packet.toXML());
		if (packet.getFrom().equals(packet.getTo())) {
			return;
		}
		
		if (packet instanceof Presence) {
			Presence presence = (Presence) packet;
			// Presence还有很多方法，可查看API
			con = QApp.xmppConnection;
			final String fromJid = presence.getFrom();// 发送方
			final String toJid = presence.getTo();// 接收方
			Roster roster = con.getRoster();
			String to = StringUtils.parseName(toJid);
			String from = StringUtils.parseName(fromJid);
			String msgtime = DateUtil.date2Str(new Date(), "MM-dd HH:mm");// 消息时间
			if (fromJid.equals(toJid)) {
				return;
			}
			Logger.i(TAG, presence.getType().name());
			if (presence.getType().equals(Presence.Type.subscribe)) {// 好友申请
				Logger.i(TAG, "收到添加好友的请求2："+fromJid);
				
				Session session = setSession(to, from, msgtime);
				session.setType(Const.MSG_TYPE_ADD_FRIEND);
				session.setContent(fromJid + "请求添加"+toJid+"为好友");
				session.setIsdispose("0");
				sessionDao.insertSession(session);
				Intent intent = new Intent(Const.ACTION_ADDFRIEND);// 发送广播，通知消息界面更新
				context.sendBroadcast(intent);
			
				Logger.e(TAG, "添加好友subscribe:"+fromJid);
			
			} else if (presence.getType().equals(Presence.Type.subscribed)) {// 同意添加好友
				Logger.e(TAG, "双方添加好友成功4："+fromJid);
			
				XmppUtil.addUsers(roster, fromJid, from,"我的好友");
				
				 Intent intent=new Intent(Const.ACTION_FRIENDS_ONLINE_STATUS_CHANGE);
	        	 context.sendBroadcast(intent);
				Logger.e(TAG, "添加好友subscribed:"+fromJid);
			} else if (presence.getType().equals(Presence.Type.unsubscribe)) {// 拒绝添加好友和删除好友
				
				Log.e(TAG, "拒绝添加好友");
			} else if (presence.getType().equals(Presence.Type.unsubscribed)) {
			
			} else if (presence.getType().equals(Presence.Type.unavailable)) {// 好友下线
																				// 要更新好友列表，可以在这收到包后，发广播到指定页面
																				// 更新列表
				Log.e(TAG, "好友下线");
				Intent intent = new Intent(
						Const.ACTION_FRIENDS_ONLINE_STATUS_CHANGE);
				intent.putExtra("from", fromJid);
				intent.putExtra("status", 0);
				context.sendBroadcast(intent);
			} else if (presence.getType().equals(Presence.Type.available)) {// 好友上线
				Log.e(TAG, "好友上线");
				Intent intent = new Intent(
						Const.ACTION_FRIENDS_ONLINE_STATUS_CHANGE);
				intent.putExtra("from", fromJid);
				intent.putExtra("status", 1);
				context.sendBroadcast(intent);
			} else {
				Log.e(TAG, "error");
			}
		}
	};
	
}
