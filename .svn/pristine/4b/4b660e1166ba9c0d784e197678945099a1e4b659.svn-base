package com.weidi.adapter;

import java.util.List;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.provider.MediaStore;
import android.text.SpannableStringBuilder;
import android.text.util.Linkify;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.weidi.R;
import com.weidi.activity.ImgPageActivity;
import com.weidi.bean.Msg;
import com.weidi.common.function.video.VideoThumbnail;
import com.weidi.common.image.ImageLoadCache;
import com.weidi.common.image.ImgConfig;
import com.weidi.util.ExpressionUtil;
import com.weidi.util.Logger;
import com.weidi.view.CircleImageView;

/**
 * @author luochangdong E-mail: 2270333671@qq.com
 * @date 创建时间：2015-7-29 下午4:28:27
 * @Description 1.0
 */
public class NewChatAdapter extends BaseAdapter {

	private static String TAG = NewChatAdapter.class.getSimpleName();

	private List<Msg> mList;
	private LayoutInflater mInflater;
	private Context mContext;
	// 不同Item布局指定
	private static final int MESSAGE_TYPE_SENT_TXT = 0;
	private static final int MESSAGE_TYPE_RECV_TXT = 1;

	private static final int MESSAGE_TYPE_SENT_IMAGE = 2;
	private static final int MESSAGE_TYPE_RECV_IMAGE = 3;

	private static final int MESSAGE_TYPE_SENT_LOCATION = 4;
	private static final int MESSAGE_TYPE_RECV_LOCATION = 5;

	private static final int MESSAGE_TYPE_SENT_VOICE = 6;
	private static final int MESSAGE_TYPE_RECV_VOICE = 7;

	private static final int MESSAGE_TYPE_SENT_VIDEO = 8;
	private static final int MESSAGE_TYPE_RECV_VIDEO = 9;

	private static final int MESSAGE_TYPE_SENT_FILE = 10;
	private static final int MESSAGE_TYPE_RECV_FILE = 11;

	private static final int MESSAGE_TYPE_SENT_VOICE_CALL = 12;
	private static final int MESSAGE_TYPE_RECV_VOICE_CALL = 13;

	public NewChatAdapter(List<Msg> mMsg, Context context) {
		this.mList = mMsg;
		mContext = context;
		mInflater = (LayoutInflater) context
				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}

	@Override
	public int getCount() {
		// TODO Auto-generated method stub
		return mList.size();
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return mList.get(position);
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return position;
	}

	@Override
	public int getViewTypeCount() {
		return 14;
	}

	@Override
	public int getItemViewType(int position) {

		int type = Integer.parseInt(mList.get(position).getBak5());
		Logger.i(TAG, "chatAdapter type:" + type);
		return type;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {

		Msg msg = mList.get(position);
		int type = getItemViewType(position);
		ViewHolderRecvText recvText = null;
		ViewHolderRecvPicture recvPicture = null;
		ViewHolderRecvVideo recvVideo = null;
		ViewHolderRecvVoice recvVoice = null;

		ViewHolderSentText sentText = null;
		ViewHolderSentPicture sentPicture = null;
		ViewHolderSentVideo sentVideo = null;
		ViewHolderSentVoice sentVoice = null;

		if (convertView == null) {
			switch (type) {
			case MESSAGE_TYPE_RECV_TXT:
				recvText = new ViewHolderRecvText();
				convertView = mInflater.inflate(R.layout.row_received_message,
						null);
				recvText.content = (TextView) convertView
						.findViewById(R.id.tv_chatcontent);
				recvText.nickname = (TextView) convertView
						.findViewById(R.id.tv_userid);
				recvText.timestamp = (TextView) convertView
						.findViewById(R.id.timestamp);
				recvText.userhead = (CircleImageView) convertView
						.findViewById(R.id.iv_userhead);

				handleRecvText(recvText, msg);
				convertView.setTag(recvText);

				break;
			case MESSAGE_TYPE_RECV_IMAGE:
				recvPicture = new ViewHolderRecvPicture();
				convertView = mInflater.inflate(R.layout.row_received_picture,
						null);

				recvPicture.llLoad = (LinearLayout) convertView
						.findViewById(R.id.ll_loading);
				recvPicture.nickname = (TextView) convertView
						.findViewById(R.id.tv_userid);
				recvPicture.percentage = (TextView) convertView
						.findViewById(R.id.percentage);
				recvPicture.progressBar = (ProgressBar) convertView
						.findViewById(R.id.progressBar);
				recvPicture.picture = (ImageView) convertView
						.findViewById(R.id.iv_recvPicture);
				recvPicture.timestamp = (TextView) convertView
						.findViewById(R.id.timestamp);
				recvPicture.userhead = (CircleImageView) convertView
						.findViewById(R.id.iv_userhead);

				handleRecvPicture(recvPicture, msg);
				convertView.setTag(recvPicture);

				break;
			case MESSAGE_TYPE_RECV_VIDEO:
				recvVideo = new ViewHolderRecvVideo();
				convertView = mInflater.inflate(R.layout.row_received_video,
						null);

				recvVideo.btnPlay = (LinearLayout) convertView
						.findViewById(R.id.ll_click_area);
				recvVideo.lenght = (TextView) convertView
						.findViewById(R.id.chatting_length_iv);
				recvVideo.size = (TextView) convertView
						.findViewById(R.id.chatting_size_iv);
				recvVideo.timestamp = (TextView) convertView
						.findViewById(R.id.timestamp);
				recvVideo.userhead = (CircleImageView) convertView
						.findViewById(R.id.iv_userhead);
				recvVideo.nickname = (TextView) convertView
						.findViewById(R.id.tv_userid);
				recvVideo.video = (ImageView) convertView
						.findViewById(R.id.chatting_content_iv);
				recvVideo.status = (ImageView) convertView
						.findViewById(R.id.chatting_status_btn);

				handleRecvVideo(recvVideo, msg);
				convertView.setTag(recvVideo);

				break;
			case MESSAGE_TYPE_RECV_VOICE:
				recvVoice = new ViewHolderRecvVoice();
				convertView = mInflater.inflate(R.layout.row_received_voice,
						null);

				recvVoice.lenght = (TextView) convertView
						.findViewById(R.id.tv_length);
				recvVoice.nickname = (TextView) convertView
						.findViewById(R.id.tv_userid);
				recvVoice.timestamp = (TextView) convertView
						.findViewById(R.id.timestamp);
				recvVoice.unread = (ImageView) convertView
						.findViewById(R.id.iv_unread_voice);
				recvVoice.userhead = (CircleImageView) convertView
						.findViewById(R.id.iv_userhead);
				recvVoice.voice = (ImageView) convertView
						.findViewById(R.id.iv_voice);

				handleRecvVoice(recvVoice, msg);
				convertView.setTag(recvVoice);

				break;
			case MESSAGE_TYPE_SENT_TXT:
				sentText = new ViewHolderSentText();
				convertView = mInflater
						.inflate(R.layout.row_sent_message, null);

				sentText.content = (TextView) convertView
						.findViewById(R.id.tv_chatcontent);
				sentText.progressBar = (ProgressBar) convertView
						.findViewById(R.id.progressBar);
				sentText.timestamp = (TextView) convertView
						.findViewById(R.id.timestamp);
				sentText.userhead = (CircleImageView) convertView
						.findViewById(R.id.iv_userhead);

				handleSentText(sentText, msg);
				convertView.setTag(sentText);

				break;
			case MESSAGE_TYPE_SENT_IMAGE:
				sentPicture = new ViewHolderSentPicture();
				convertView = mInflater
						.inflate(R.layout.row_sent_picture, null);

				sentPicture.timestamp = (TextView) convertView
						.findViewById(R.id.timestamp);
				sentPicture.percentage = (TextView) convertView
						.findViewById(R.id.percentage);
				sentPicture.userhead = (ImageView) convertView
						.findViewById(R.id.iv_userhead);
				sentPicture.picture = (ImageView) convertView
						.findViewById(R.id.iv_sendPicture);
				sentPicture.progressBar = (ProgressBar) convertView
						.findViewById(R.id.progressBar);
				sentPicture.llLoad = (LinearLayout) convertView
						.findViewById(R.id.ll_loading);

				handleSentPicture(sentPicture, msg);
				convertView.setTag(sentPicture);

				break;
			case MESSAGE_TYPE_SENT_VIDEO:
				sentVideo = new ViewHolderSentVideo();
				convertView = mInflater.inflate(R.layout.row_sent_video, null);

				sentVideo.btnPlay = (LinearLayout) convertView
						.findViewById(R.id.ll_click_area);
				sentVideo.lenght = (TextView) convertView
						.findViewById(R.id.chatting_length_iv);
				sentVideo.llLoad = (LinearLayout) convertView
						.findViewById(R.id.ll_loading);
				sentVideo.percentage = (TextView) convertView
						.findViewById(R.id.percentage);
				sentVideo.progressBar = (ProgressBar) convertView
						.findViewById(R.id.progressBar);
				sentVideo.size = (TextView) convertView
						.findViewById(R.id.chatting_size_iv);
				sentVideo.timestamp = (TextView) convertView
						.findViewById(R.id.timestamp);
				sentVideo.userhead = (ImageView) convertView
						.findViewById(R.id.iv_userhead);
				sentVideo.video = (ImageView) convertView
						.findViewById(R.id.chatting_content_iv);
				sentVideo.status = (ImageView) convertView
						.findViewById(R.id.chatting_status_btn);

				handleSentVideo(sentVideo, msg);
				convertView.setTag(sentVideo);

				break;
			case MESSAGE_TYPE_SENT_VOICE:
				sentVoice = new ViewHolderSentVoice();
				convertView = mInflater.inflate(R.layout.row_sent_voice, null);

				sentVoice.btnPlay = (ImageView) convertView
						.findViewById(R.id.iv_voice);
				sentVoice.progressBar = (ProgressBar) convertView
						.findViewById(R.id.progressBar);
				sentVoice.timestamp = (TextView) convertView
						.findViewById(R.id.timestamp);
				sentVoice.userhead = (ImageView) convertView
						.findViewById(R.id.iv_userhead);

				handleSentVoice(sentVoice, msg);
				convertView.setTag(sentVoice);

				break;

			default:
				break;
			}
		} else {
			switch (type) {
			case MESSAGE_TYPE_RECV_TXT:
				recvText = (ViewHolderRecvText) convertView.getTag();
				handleRecvText(recvText, msg);

				break;
			case MESSAGE_TYPE_RECV_IMAGE:
				recvPicture = (ViewHolderRecvPicture) convertView.getTag();
				handleRecvPicture(recvPicture, msg);

				break;
			case MESSAGE_TYPE_RECV_VIDEO:
				recvVideo = (ViewHolderRecvVideo) convertView.getTag();
				handleRecvVideo(recvVideo, msg);

				break;
			case MESSAGE_TYPE_RECV_VOICE:
				recvVoice = (ViewHolderRecvVoice) convertView.getTag();
				handleRecvVoice(recvVoice, msg);

				break;
			case MESSAGE_TYPE_SENT_TXT:
				sentText = (ViewHolderSentText) convertView.getTag();
				handleSentText(sentText, msg);

				break;
			case MESSAGE_TYPE_SENT_IMAGE:
				sentPicture = (ViewHolderSentPicture) convertView.getTag();
				handleSentPicture(sentPicture, msg);

				break;
			case MESSAGE_TYPE_SENT_VIDEO:
				sentVideo = (ViewHolderSentVideo) convertView.getTag();
				handleSentVideo(sentVideo, msg);

				break;
			case MESSAGE_TYPE_SENT_VOICE:
				sentVoice = (ViewHolderSentVoice) convertView.getTag();
				handleSentVoice(sentVoice, msg);

				break;

			default:
				break;
			}
		}

		return convertView;
	}

	private void handleSentVoice(ViewHolderSentVoice sentVoice, Msg msg) {
		sentVoice.timestamp.setText(msg.getDate());
		sentVoice.btnPlay.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub

			}
		});

	}

	private void handleSentVideo(ViewHolderSentVideo sentVideo, Msg msg) {
		// TODO Auto-generated method stub

	}

	private void handleSentPicture(ViewHolderSentPicture sentPicture, Msg msg) {
		// TODO Auto-generated method stub

	}

	private void handleSentText(ViewHolderSentText sentText, Msg msg) {
		// TODO Auto-generated method stub

	}

	private void handleRecvVoice(ViewHolderRecvVoice recvVoice, Msg msg) {
		// TODO Auto-generated method stub

	}

	private void handleRecvVideo(ViewHolderRecvVideo recvVideo, Msg msg) {
	    
		showRecvHead(recvVideo.userhead,recvVideo.nickname,msg);
		Bitmap videoImg = VideoThumbnail.getVideoThumbnail(
				msg.getContent(), 120, 120,
				MediaStore.Images.Thumbnails.MICRO_KIND);
	}

	private void handleRecvPicture(ViewHolderRecvPicture recvPicture,
			final Msg msg) {
		ImageLoadCache.getBinnerBitmap(recvPicture.picture, msg.getContent());
		showRecvHead(recvPicture.userhead,recvPicture.nickname,msg);

		recvPicture.picture.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent intentImg = new Intent(mContext, ImgPageActivity.class);
				intentImg.putExtra("url", msg.getContent());
				mContext.startActivity(intentImg);  
			}
		});
	}

	private void handleRecvText(ViewHolderRecvText recvText, Msg msg) {
		SpannableStringBuilder sb = ExpressionUtil.prase(mContext,
				recvText.content, msg.getContent());// 对内容做处理
		recvText.content.setText(sb);
		Linkify.addLinks(recvText.content, Linkify.ALL);// 增加文本链接类型
		recvText.timestamp.setText(msg.getDate());
		showRecvHead(recvText.userhead, recvText.nickname, msg);
	}

	private void showRecvHead(CircleImageView head, TextView nick, Msg msg) {
		if (msg.getBak4() != "" && msg.getBak4() != null) {
			head.setVisibility(View.VISIBLE);
			ImgConfig.showHeadImg(msg.getBak4(), head);
			nick.setText(msg.getFromUser());

		} else {
			head.setVisibility(View.GONE);
			nick.setText("");
		}
	}

	class ViewHolderRecvText {
		private TextView nickname, content, timestamp;
		private CircleImageView userhead;
	}

	class ViewHolderRecvPicture {
		private TextView nickname, timestamp, percentage;
		private ImageView picture;
		private CircleImageView userhead;
		private ProgressBar progressBar;
		private LinearLayout llLoad;
	}

	class ViewHolderRecvVideo {
		private TextView nickname, timestamp, size, lenght;
		private ImageView video, status;
		private CircleImageView userhead;
		private LinearLayout btnPlay;
	}

	class ViewHolderRecvVoice {
		private TextView nickname, timestamp, lenght;
		private ImageView voice, unread;
		private CircleImageView userhead;
	}

	class ViewHolderSentText {
		private TextView content, timestamp;
		private CircleImageView userhead;
		private ProgressBar progressBar;
	}

	class ViewHolderSentPicture {
		private TextView timestamp, percentage;
		private ImageView userhead, picture;
		private ProgressBar progressBar;
		private LinearLayout llLoad;
	}

	class ViewHolderSentVideo {
		private TextView timestamp, size, lenght, percentage;
		private ImageView userhead, video, status;
		private LinearLayout btnPlay;
		private ProgressBar progressBar;
		private LinearLayout llLoad;
	}

	class ViewHolderSentVoice {
		private TextView timestamp;
		private ImageView userhead, btnPlay;
		private ProgressBar progressBar;
	}

}
