package com.weidi.fragment;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.List;
import java.util.Map;

import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smackx.packet.VCard;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.weidi.QApp;
import com.weidi.R;
import com.weidi.activity.LoginActivity;
import com.weidi.activity.MsgAlertActivity;
import com.weidi.activity.MsgHistroyActivity;
import com.weidi.activity.SignActivity;
import com.weidi.activity.VcardActivity;
import com.weidi.common.SortAdapter;
import com.weidi.db.DBContext2;
import com.weidi.service.MsfService;
import com.weidi.util.PreferencesUtils;
import com.weidi.util.XmppUtil;

public class SettingFragment extends Fragment implements OnClickListener{

	private Context mContext;
	private View mBaseView;
	private TextView name,tv_sign;
	private RelativeLayout online_status,rl_sign,rl_msg,rl_histroy,login_out;
	private ImageView iv_stutas,pic;//在线状态
	private TextView tv_stutas;
	
	String[] items;
	
	private PopupWindow popWindow;
	private LayoutInflater layoutInflater;
	private TextView loginout;
	private LinearLayout cancel;
	
	VCard vcard=new VCard();
	Updatephone updatephone;
	Handler handler;
	DBContext2 dbcontext;
	List<Map<String,Object>> my;
    Map<String,Object> info;
    String iv_avater;
    Uri uri;
    String account,relaccount;
    String path="/sdcard/imageVCard/";
   	String dirpath;
   	byte[] mydata;
   
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {
		mContext=getActivity();
		mBaseView=inflater.inflate(R.layout.fragment_mine, null);
		layoutInflater = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		items=  new String[]{"在线","Q我吧","隐身","忙碌","离开"};
	//	dbcontext=new DBContext2(getActivity());
		 account=PreferencesUtils.getSharePreStr(QApp.getInstance(), "username");
		 if(account.length()==11){
	        	relaccount=PreferencesUtils.getSharePreStr(QApp.getInstance(), "weidi");
	        	Log.i("fgff", relaccount);
	        }else if(account.length()==7){
	        	relaccount=account;
	        }
		 dirpath=path+relaccount+".txt";
		init();
		
		//更新图片
		updatephone = new Updatephone();
		getActivity().registerReceiver(updatephone, new IntentFilter(
				"update_ok"));
		return mBaseView;
		
	}
	
	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		getActivity().unregisterReceiver(updatephone);
	}
	
	private void init(){
		
		try {
			vcard.load(QApp.xmppConnection,relaccount+"@"+"jsmny");
		} catch (XMPPException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		//用于更新个人头像
		 handler = new Handler(){   
		        public void handleMessage(Message msg) {  
		            switch (msg.what) {      
		            case 1:      
						
		            	     /*Log.i("QQQQQQQQQ", "QQQQQQQQ");
						     my=dbcontext.query();
						     info=new HashMap<String,Object>();
						     info=my.get(0);
						      Log.i("QQQQQQQQQ", "QQQQQQQQ");
						      iv_avater=(String)info.get("iv_avater");
						      uri= Uri.parse(iv_avater);        
						      pic.setImageURI(uri);*/
		            	/*Log.i("UUUUUUUUUUUUUU", "uuuuuuuuuuuuuuuuu");
		            	byte[] bm=vcard.getAvatar();
		            	Bitmap bitmap=VcardActivity.getPicFromBytes(bm, null);
		                pic.setImageBitmap(bitmap);
		                Log.i("PPPPPPPPPP", "搞定了");*/
		                try {
							FileInputStream in=new FileInputStream(dirpath);
							byte[] buffer = new byte[1024];
					        int len = -1;
					        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
					        while ((len = in.read(buffer)) != -1) {
					            outStream.write(buffer, 0, len);
					        }
					        byte[] data = outStream.toByteArray();
							pic.setImageBitmap(VcardActivity.getPicFromBytes(data,null));
							outStream.close();
					        in.close();
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		              
		                break;      
		            }      
		            super.handleMessage(msg);  
		        }  
		          
		    };  
		name=(TextView) mBaseView.findViewById(R.id.name);
		name.setText(relaccount);
		tv_sign=(TextView) mBaseView.findViewById(R.id.tv_sign);
		online_status=(RelativeLayout) mBaseView.findViewById(R.id.online_status);//在线状态
		rl_sign=(RelativeLayout) mBaseView.findViewById(R.id.rl_sign);//签名
		rl_msg=(RelativeLayout) mBaseView.findViewById(R.id.rl_msg);//消息通知
		rl_histroy=(RelativeLayout) mBaseView.findViewById(R.id.rl_histroy);//消息记录
		login_out=(RelativeLayout) mBaseView.findViewById(R.id.login_out);//退出\
		pic=(ImageView) mBaseView.findViewById(R.id.pic);
		//初始话个人头像
		// pic.setImageResource(R.drawable.default_useravatar);
		/*Log.i("hhhhhhhhhhhhhh", "HHHHHHHHHHHH");
		my=dbcontext.query(account);
	    info=new HashMap<String,Object>();
	    info=my.get(0);
	    Log.i("hhhhhhhhhhhhhh", "HHHHHHHHHHHH");
	    iv_avater=(String)info.get("iv_avater");
	    
	    if(iv_avater.length()==0){
	    pic.setImageResource(R.drawable.default_useravatar);
	    }
	    else{
	    	File imghead=new File(iv_avater);
	    	if(imghead.exists()){
	    	  uri= Uri.parse(iv_avater);        
	  	      pic.setImageURI(uri);
	    	}else{
	    		byte[] bm=vcard.getAvatar();
	    		if(bm==null){
	    			pic.setImageResource(R.drawable.default_useravatar);
	    		}else{
	    			Bitmap bitmap=VcardActivity.getPicFromBytes(bm, null);
	    	        pic.setImageBitmap(bitmap);
	    		}
	    	}
	      
	      }*/
		
		/*byte[] bm=vcard.getAvatar();
		if(bm==null){
			pic.setImageResource(R.drawable.default_useravatar);
		}else{
			Bitmap bitmap=VcardActivity.getPicFromBytes(bm, null);
	        pic.setImageBitmap(bitmap);
		}*/
		try {
			
			byte[] vdata=vcard.getAvatar();
			Log.i("TTT", "这个不可能为空吧"+vdata);
			if(vdata==null){
				pic.setImageResource(R.drawable.default_useravatar);
			}else{
				File file=new File(dirpath);
				if(!file.exists()){
					byte[] data3=SortAdapter.getbyte(dirpath,vdata);
					pic.setImageBitmap(VcardActivity.getPicFromBytes(data3,null));
				}else{
					FileInputStream in=new FileInputStream(dirpath);
					byte[] buffer = new byte[1024];
					int len = -1;
					ByteArrayOutputStream outStream = new ByteArrayOutputStream();
					while ((len = in.read(buffer)) != -1) {
					    outStream.write(buffer, 0, len);
					}
					byte[] data = outStream.toByteArray();
					outStream.close();
					in.close();
					if(!new String(vdata).equals(new String(data))){
						byte[] data2=SortAdapter.getbyte(dirpath,vdata);
						pic.setImageBitmap(VcardActivity.getPicFromBytes(data2,null));
					}else{
						pic.setImageBitmap(VcardActivity.getPicFromBytes(data,null));
					}
				}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//		iv_stutas=(ImageView) mBaseView.findViewById(R.id.iv_stutas);
//		tv_stutas=(TextView) mBaseView.findViewById(R.id.tv_stutas);
		XmppUtil.setOnlineStatus(iv_stutas,PreferencesUtils.getSharePreInt(mContext, "online_status"),tv_stutas,items);
		
		online_status.setOnClickListener(this);
		rl_sign.setOnClickListener(this);
		rl_msg.setOnClickListener(this);
		rl_histroy.setOnClickListener(this);
		login_out.setOnClickListener(this);
		
	}
	
	@Override
	public void onStart() {
		super.onStart();
		tv_sign.setText(PreferencesUtils.getSharePreStr(mContext, "sign"));
	}

	@Override
	public void onClick(View arg0) {
		Intent intent=null;
		switch (arg0.getId()) {
		case R.id.online_status:
			/*Builder bd = new AlertDialog.Builder(mContext);
			bd.setItems(items, new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface arg0, int arg1) {
					XMPPConnection mXMPPConnection=QApp.xmppConnection;
					if(mXMPPConnection==null){
						ToastUtil.showShortToast(mContext, "设置失败，请检查您的网络连接");
						return;
					}
					XmppUtil.setPresence(mContext,mXMPPConnection, arg1);
					XmppUtil.setOnlineStatus(iv_stutas,arg1,tv_stutas,items);
					PreferencesUtils.putSharePre(mContext, "online_status", arg1);//将状态保存
				}
			});
			bd.create().show();*/
			Intent myintent=new Intent(getActivity(),VcardActivity.class);
			startActivity(myintent);
			break;
		case R.id.rl_sign:
			intent=new Intent(mContext, SignActivity.class);
			startActivity(intent);
			break;
		case R.id.rl_msg:
			intent=new Intent(mContext, MsgAlertActivity.class);
			startActivity(intent);
			break;
		case R.id.rl_histroy:
			intent=new Intent(mContext, MsgHistroyActivity.class);
			startActivity(intent);
			break;
		case R.id.login_out:
			showPopupWindow(login_out);
			break;
			
		
		}
	}
	
	@SuppressWarnings("deprecation")
	private void showPopupWindow(View parent){
		if (popWindow == null) {		
			View view = layoutInflater.inflate(R.layout.pop_loginout,null);
			popWindow = new PopupWindow(view,LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,true);
			initPop(view);
		}	
		popWindow.setAnimationStyle(android.R.style.Animation_InputMethod);
		popWindow.setFocusable(true);
		popWindow.setOutsideTouchable(true);
		popWindow.setBackgroundDrawable(new BitmapDrawable());	
		popWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
		popWindow.showAtLocation(parent, Gravity.CENTER, 0, 0);
	}
	
	public void initPop(View view){
		loginout = (TextView) view.findViewById(R.id.loginout);//退出
		cancel= (LinearLayout) view.findViewById(R.id.cancel);//取消
		loginout.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				try{
					MsfService.getInstance().stopSelf();
				}catch (Exception e) {
					
				}
				Intent intent=new Intent(mContext, LoginActivity.class);
				mContext.startActivity(intent);
				getActivity().finish();
			}
		});
		cancel.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				popWindow.dismiss(); 
			}
		});
	}
	
	class Updatephone extends BroadcastReceiver{

		@Override
		public void onReceive(Context arg0, Intent intent) {
			Log.i("TAGG", "已经接受到更新图片的通知");
			   Message message = new Message();      
	            message.what = 1;      
	            handler.sendMessage(message); 
	            Log.i("TAGG", "已经叫人去更新图片了");
			
		}
		
	}
	
}
