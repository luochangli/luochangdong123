package com.weidi.activity;


import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smackx.packet.VCard;

import com.weidi.QApp;
import com.weidi.R;
import com.weidi.common.SortAdapter;
import com.weidi.db.DBContext2;
import com.weidi.util.PreferencesUtils;
import com.weidi.view.TitleBarView;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.PixelFormat;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Message;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

public class VcardActivity extends Activity {
    public static final int NONE = 0;
    public static final int PHOTOHRAPH = 1;
    public static final int PHOTOZOOM = 2; 
    public static final int PHOTORESOULT = 3;    
    RelativeLayout re_avatar,re_name;
    ImageView imageView = null;
    private String imageName;
    private TextView tv_temp_text;
    public static final String IMAGE_UNSPECIFIED = "image/*";   
    TextView tv_name,tv_sex,tv_temp_address,tv_region,tv_sign;
    RelativeLayout re_address,re_sex,re_region,re_sign;   
    ContentValues cv=new ContentValues();
    private DBContext2 dbContext;    
    Uri originalUri;
    private TitleBarView mTitleBarView;    
    Myinfo myinfo;
    VCard vcard=new VCard();
    XMPPConnection connection;
    Message message = new Message();  
    List<Map<String,Object>> my;
    Map<String,Object> info;
    String sex,nickname,iv_avater,sign,region;
    Bitmap myBitmap;
    UpdateSign updatesign;   
    UpdateNick updatenick;
    String account;
    String relaccount="";
    String path="/sdcard/imageVCard/";
	String dirpath="";
	String picFileFullName;
	private String saveDir = Environment.getExternalStorageDirectory()
			.getPath() + "/temp_image";
	File file;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_myinfo);
        dbContext=new DBContext2(this);
        myinfo=new Myinfo();
        this.registerReceiver(myinfo, new IntentFilter("update_myinfo"));
        //更新昵称
        updatenick=new UpdateNick();
        this.registerReceiver(updatenick, new IntentFilter("updatename"));
        //更新个人签名
        updatesign=new UpdateSign();
        this.registerReceiver(updatesign, new IntentFilter("updatesign"));
        
         account=PreferencesUtils.getSharePreStr(this, "username");
        
        
        Log.i("TTTTTTTTTTTTTTTTTTTT", ""+relaccount);
        if(account.length()==11){
        	relaccount=PreferencesUtils.getSharePreStr(QApp.getInstance(), "weidi");
        	Log.i("fgff", relaccount);
        }else if(account.length()==7){
        	relaccount=account;
        }
        dirpath=path+relaccount+".txt";
        try {
        	connection=QApp.xmppConnection;
        	if(connection.isAuthenticated()){
        		 vcard.load(connection,relaccount+"@"+"jsmny");
        		 initMy();
        	}else{
        		nonetworkinit();
        	} 
        } catch (XMPPException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
       
        
        initView();
        setmy();
        initTitleView();
    }
    
    public void nonetworkinit(){
    	my=dbContext.query(relaccount);
        if(my.size()==0){
        	cv.put("nickname", "");
        	cv.put("sex", "");
        	cv.put("sign", "");
        	cv.put("region", "");
        	cv.put("iv_avater","");
        }
    }
    
    
    public void initMy(){
        my=dbContext.query(relaccount);
        if(my.size()==0){
            if(vcard.getNickName()==null){
            	vcard.setNickName("");
            	cv.put("nickname", "");
            }else{
            	cv.put("nickname",vcard.getNickName());
            }
             
            if(vcard.getField("sex")==null){
            	vcard.setField("sex", "");
            	cv.put("sex", "");
            }else{
            	cv.put("sex",vcard.getField("sex"));
            }
            
            if(vcard.getEmailWork()==null){
            	vcard.setEmailWork("");
            	cv.put("sign", "");
            }else{
            	cv.put("sign",vcard.getEmailWork());
            }
            cv.put("region", "");
            cv.put("account", relaccount);
      
            byte[] avater=vcard.getAvatar();
            dirpath=path+relaccount+".txt";
	            if(avater==null){
	            	cv.put("iv_avater","");
	            }else{
	            	 try {
						FileOutputStream  out=new FileOutputStream(dirpath);
						out.write(avater);
						out.close();
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} 
	 	           cv.put("iv_avater",dirpath);
	            }
            dbContext.insert(cv);
            Log.i("GGGGGGG", "已经插入一条数据了");
            try {
				vcard.save(connection);
			} catch (XMPPException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	            
        }else{
        	//本地个人信息与服务区的信息比较
	        info=new HashMap<String,Object>();
        	info=my.get(0);
        	String nickname=(String) info.get("nickname");
        	String sex=(String) info.get("sex");
        	String sign=(String) info.get("sign");
        	
        	//String region=(String) info.get("region");
        	String vnickname=vcard.getNickName();
        	String vsex=vcard.getField("sex");
        	String vsign=vcard.getEmailWork();
        	
        	if(!nickname.equals(vnickname)){
            	cv.put("nickname", vnickname);
        		dbContext.update(cv, relaccount);
        	}
        	if(!sex.equals(vsex)){	
        		
        		cv.put("sex",vsex);
        		dbContext.update(cv, relaccount);
        	}
        	if(!sign.equals(vsign)){
        		cv.put("sign",vsign);	
        		dbContext.update(cv, relaccount);
        	}
        	String iv_avaterpath=(String)info.get("iv_avater");
        	Log.i("HHHHHH", iv_avaterpath);
        	byte[] vdata=vcard.getAvatar();
        	if(vdata==null){
        		cv.put("iv_avater", "");
        	}else{
            	try {
    				FileInputStream in=new FileInputStream(iv_avaterpath);
    				byte[] buffer = new byte[2048];
    				int len = -1;
    				ByteArrayOutputStream outStream = new ByteArrayOutputStream();
    				while ((len = in.read(buffer)) != -1) {
    				    outStream.write(buffer, 0, len);
    				}
    				byte[] data = outStream.toByteArray();
    				if(!new String(data).equals(new String(vdata))){
    					FileOutputStream out=new FileOutputStream(dirpath);
    					out.write(vdata);
    					out.close();
    					outStream.close();
    					in.close();
    					cv.put("iv_avater", dirpath);
    					dbContext.update(cv, relaccount);
    					Log.i("TTTT", "66666666666666666");
    				}
    			} catch (Exception e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			} 
        	}
        }
     }
    
    public void setmy(){
    	Log.i("TAAAA", "1111111111111");
        my=dbContext.query(relaccount);
        info=new HashMap<String,Object>();
        info=my.get(0);
        Log.i("TAAAA", "1111111111111");
        sex=(String)info.get("sex"); 
        Log.i("TAAAA", "6666"+sex);
        tv_sex.setText(sex);
        nickname=(String)info.get("nickname");
        tv_name.setText(nickname);
        iv_avater=(String)info.get("iv_avater");
        Log.i("FFFF", ""+iv_avater);
         if(iv_avater.length()==0){
        	 imageView.setImageResource(R.drawable.default_useravatar);
         }else{
        	 Uri uri= Uri.parse(iv_avater);        
             imageView.setImageURI(uri);
         }
         sign=(String) info.get("sign");
         tv_sign.setText(sign);
        
       /* Log.i("WWWWWWWW", "WWWWWWWWW");
        byte[] bm=vcard.getAvatar();
        Log.i("WWWWWWWW", "WWWWWWWWW");
        
        if(bm==null){
        	imageView.setImageResource(R.drawable.default_useravatar);
        }else{
        	Bitmap bitmap=VcardActivity.getPicFromBytes(bm, null);
            imageView.setImageBitmap(bitmap);
        }*/
        	
        
      //  sign=(String) info.get("sign");
      //  tv_sign.setText(sign);
        //这里把EmailWord当做个性签名，因为VCard中没有设置个性签名这个方法
      //  vcard.setEmailWork(sign);  
        
       /* region=(String)info.get("region");
        tv_temp_text.setText(region);*/
        
    }       
    
    private void initView() {
    	mTitleBarView=(TitleBarView)findViewById(R.id.title_bar);
       re_avatar=(RelativeLayout)findViewById(R.id.re_avatar);
       re_sign=(RelativeLayout)findViewById(R.id.re_sign);
        re_name=(RelativeLayout)findViewById(R.id.re_name);
      //  re_address=(RelativeLayout)findViewById(R.id.re_address);
        re_sex=(RelativeLayout)findViewById(R.id.re_sex);
        re_region=(RelativeLayout)findViewById(R.id.re_region);      
        tv_name=(TextView)findViewById(R.id.tv_name);
        tv_sex=(TextView)findViewById(R.id.tv_sex);
        tv_temp_address=(TextView)findViewById(R.id.tv_temp_address);
        tv_sign=(TextView)findViewById(R.id.tv_sign);
      //  tv_region=(TextView)findViewById(R.id.tv_temp_text);     
        imageView = (ImageView) findViewById(R.id.iv_avatar);       
        tv_temp_text = (TextView) findViewById(R.id.tv_temp_text);
        re_avatar.setOnClickListener(new MyListener());
        re_name.setOnClickListener(new MyListener());
        re_sign.setOnClickListener(new MyListener());
        re_sex.setOnClickListener(new MyListener());
       // re_address.setOnClickListener(new MyListener());
        re_region.setOnClickListener(new MyListener());
   }  
    
    private void initTitleView(){
		mTitleBarView.setCommonTitle(View.VISIBLE, View.VISIBLE,View.GONE, View.GONE);
		mTitleBarView.setTitleText(R.string.title_myinfo);
		mTitleBarView.setBtnLeft(R.drawable.fft, R.string.back);
		mTitleBarView.setBtnLeftOnclickListener(new OnClickListener() {	
			@Override
			public void onClick(View v) {
				finish();
			}
		});
	}
    
    class MyListener implements OnClickListener {
        @Override
        public void onClick(View v) {
            switch (v.getId()) {          
            case R.id.re_avatar:
                showPhotoDialog();
                break;
            case R.id.re_name:
               startActivity(new Intent(VcardActivity.this,NickActivity.class));
                break;
            case R.id.re_sign:
            	startActivity(new Intent(VcardActivity.this,SignActivity.class));
                break;
            case R.id.re_sex:
                showSexDialog();
                break;
            case R.id.re_region:

            	startActivityForResult(new Intent(VcardActivity.this,BindPhoneActivity.class), 200);
            //	startActivity(new Intent(VcardActivity.this,NickActivity.class));
                break;
            }
        }
    }
  
    public void showPhotoDialog() {       
        final AlertDialog dlg = new AlertDialog.Builder(this).create();
        dlg.show();
        Window window = dlg.getWindow();      
        window.setContentView(R.layout.alertdialog);    
        TextView tv_paizhao = (TextView) window.findViewById(R.id.tv_content1);
        tv_paizhao.setText("请拍照");       
        tv_paizhao.setOnClickListener(new OnClickListener() {            
            @Override
            public void onClick(View v) {               
               getNowTime();
                imageName = getNowTime() + ".jpg";
            	File savePath = new File(saveDir);
        		if (!savePath.exists()) {
        			savePath.mkdirs();
        		}
                    String state = Environment.getExternalStorageState();
    				if (state.equals(Environment.MEDIA_MOUNTED)) {
    					file = new File(saveDir, imageName);
    					Intent intenttest = new Intent(
    							"android.media.action.IMAGE_CAPTURE");
    					intenttest.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));
    					startActivityForResult(intenttest,PHOTOHRAPH);
    					dlg.cancel();
    				}
            }
        });
        TextView tv_xiangce = (TextView) window.findViewById(R.id.tv_content2);
        tv_xiangce.setText("请选择相片"); 
        tv_xiangce.setOnClickListener(new OnClickListener() {           
            @Override
            public void onClick(View v) {                     
                Intent intent = new Intent();
                intent.setAction(Intent.ACTION_PICK);
                intent.setData(MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivityForResult(intent, PHOTOZOOM);
                dlg.cancel(); 
            }
        });     
    }
    public void showSexDialog() {       
        final AlertDialog dlg = new AlertDialog.Builder(this).create();
        dlg.show();
        Window window = dlg.getWindow();    
        window.setContentView(R.layout.alertdialog);       
        TextView sex_nan = (TextView) window.findViewById(R.id.tv_content1);
        sex_nan.setText("男");
        sex_nan.setOnClickListener(new OnClickListener() {           
            @Override
            public void onClick(View v) {              
                cv.put("sex", "男");
                dbContext.update(cv,relaccount);
                tv_sex.setText("男");
                vcard.setField("sex", "男");
                dlg.cancel();  
            }
        });
        TextView sex_nv = (TextView) window.findViewById(R.id.tv_content2);
        sex_nv.setText("女");
        sex_nv.setOnClickListener(new OnClickListener() {
            
            @Override
            public void onClick(View v) {              
                cv.put("sex", "女");
                dbContext.update(cv,relaccount);
                tv_sex.setText("女");
                vcard.setField("sex", "女");
                dlg.cancel();  
            }
        }); 
    }    
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    	super.onActivityResult(requestCode, resultCode, data);
        ContentResolver resolver = getContentResolver();
       
        if (requestCode == PHOTOHRAPH && resultCode == RESULT_OK) {
        	Log.i("TTTTTT", "还哦好烦hi东方红ID");
        	if (file != null && file.exists()) {
        		 cv.put("iv_avater", file.getPath());
        		 Log.i("eeeeeeeeeee", file.getPath());
        		 Log.i("eeeeeeeeeee", file.getAbsolutePath());
                 dbContext.update(cv,relaccount);
				 startPhotoZoom(Uri.fromFile(file));
			}
        }
        if (resultCode == NONE||data == null)
        {
        	 Log.i("UUUUUUUUUUUU", "拍照不行吗");
        	 return;
        }
        /*if (requestCode == PHOTOHRAPH) { 
        	Log.i("ZZZZZZZZZZZZZZZZZZZZZZZZZ", "怎么这里走不过去");
            File picture = new File(Environment.getExternalStorageDirectory(), imageName);
            File outDir = Environment
					.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
			if (!outDir.exists()) {
				outDir.mkdirs();
			}
			File outFile = new File(outDir, System.currentTimeMillis() + ".jpg");
            System.out.println("------------------------" + picture);
            Log.i("ttttttttttt",picture.getAbsolutePath());
            cv.put("iv_avater", picture.getAbsolutePath());
            dbContext.update(cv,relaccount);
            startPhotoZoom(Uri.fromFile(picture));
        }     */
        if (requestCode == PHOTOZOOM) {
            try {
                Uri originalUri = data.getData();
                String[] proj = {MediaStore.Images.Media.DATA};
                //获得图片的路径
                Cursor cursor = managedQuery(originalUri, proj, null, null, null); 
                int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                cursor.moveToFirst();
                String path = cursor.getString(column_index);
                Log.i("TAG", path);                
                cv.put("iv_avater",path);
                dbContext.update(cv,relaccount);                
                Log.i("TAG", ""+originalUri);               
                Log.i("TAG", ""+ originalUri.getPath());  
                
                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                byte[] mContent = readStream(resolver.openInputStream(Uri
                        .parse(originalUri.toString())));
                Log.i("TAG", "111111111111");
                myBitmap = getPicFromBytes(mContent, null);
                myBitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
                int options = 10;  
                int msgSize = stream.toByteArray().length;
                while ( (msgSize / 1024)>15) {  //循环判断如果压缩后图片是否大于15kb,大于继续压缩         
                	stream.reset();//重置baos即清空baos  
                	myBitmap.compress(Bitmap.CompressFormat.JPEG, options, stream);//这里压缩options%，把压缩后的数据存放到baos中  
                    msgSize %= 10;
                    Log.i("TAG", ""+msgSize+"wo");
                    Log.i("TTTTTTTT",  ""+stream.toByteArray().length);
               }
                byte[] avater=stream.toByteArray();
                
                //将自己的头像写到文件中
    			Log.i("HHHHHHHHHH", "开始读取文件");
    		    byte[] mydata=SortAdapter.getbyte(dirpath,avater);
    			Log.i("LLLLLLLLLLLLLL", "可以来这里吗"); 
                Log.i("taggg", ""+avater.length);
                myBitmap = getPicFromBytes(mydata, null);
                vcard.setAvatar(avater);
                BitmapDrawable bd = new BitmapDrawable(myBitmap);  
                Drawable d = zoomDrawable(bd, 63, 63, false);             
                imageView.setImageDrawable(d);
                //通知更新图片
               Intent intent2=new Intent("update_ok");
               sendBroadcast(intent2);
               Log.i("TAG", "更新图片的广播已经发出去了");
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
        if (requestCode == PHOTORESOULT) {
            Bundle extras = data.getExtras();
            if (extras != null) {
                Bitmap photo = extras.getParcelable("data");
                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                photo.compress(Bitmap.CompressFormat.JPEG, 100, stream);
                int options = 10; 
                int msgSize=stream.toByteArray().length;
                while ( stream.toByteArray().length / 1024>20) {  //循环判断如果压缩后图片是否大于100kb,大于继续压缩         
                	stream.reset();//重置baos即清空baos  
                	photo.compress(Bitmap.CompressFormat.JPEG, options, stream);//这里压缩options%，把压缩后的数据存放到baos中  
                	msgSize %= 10;//每次都减少10  
                    Log.i("TAG", ""+options);
               }
                byte[] avater=stream.toByteArray();
                //将自己的头像写到文件中
    				Log.i("HHHHHHHHHH", "开始读取文件");
    		        byte[] mydata=SortAdapter.getbyte(dirpath,avater);
    			    Log.i("LLLLLLLLLLLLLL", "可以来这里吗"); 
                    vcard.setAvatar(avater);
                    Log.i("taggg", ""+avater.length);
                    photo = getPicFromBytes(mydata, null);
                    imageView.setImageBitmap(photo);  
                    //通知更新图片
                    Intent intent2=new Intent("update_ok");
                    sendBroadcast(intent2);
                    Log.i("TAG", "更新图片的广播已经发出去了");
            }
        }if (requestCode == 200 && resultCode == RESULT_OK) {
			String bindPhone = data.getStringExtra("BindPhone");
			tv_temp_text.setText(bindPhone);
		}
    }
    
    
    @SuppressLint("SimpleDateFormat")
    private String getNowTime() {
        Date date = new Date(System.currentTimeMillis());
        SimpleDateFormat dateFormat = new SimpleDateFormat("MMddHHmmssSS");
        return dateFormat.format(date);
    }
    
   
    public void startPhotoZoom(Uri uri) {
    	Log.i("RRRRRR", "startPhotoZoom进步了");
        Intent intent = new Intent("com.android.camera.action.CROP");
        intent.setDataAndType(uri, IMAGE_UNSPECIFIED);
        intent.putExtra("crop", "true");
       
        intent.putExtra("aspectX", 1);
        intent.putExtra("aspectY", 1);
       
        intent.putExtra("outputX", 64);
        intent.putExtra("outputY", 64);
        intent.putExtra("return-data", true);
        startActivityForResult(intent, PHOTORESOULT);
    }
    
    public static byte[] readStream(InputStream inStream) throws Exception {
        byte[] buffer = new byte[1024];
        int len = -1;
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        while ((len = inStream.read(buffer)) != -1) {
            outStream.write(buffer, 0, len);
        }
        byte[] data = outStream.toByteArray();
        outStream.close();
        inStream.close();
        return data;

    }  

    public static Bitmap getPicFromBytes(byte[] bytes,
            BitmapFactory.Options opts) {
        if (bytes != null)
            if (opts != null)
                return BitmapFactory.decodeByteArray(bytes, 0, bytes.length,
                        opts);
            else
                return BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
        return null;
    }
    
   
    private Drawable zoomDrawable(Drawable drawable, int w, int h, Boolean scale) {
        int width = drawable.getIntrinsicWidth();
        int height = drawable.getIntrinsicHeight();
        Bitmap oldbmp = drawableToBitmap(drawable);
        Matrix matrix = new Matrix();
        float scaleWidth;
        float scaleHeight;
        if (scale == true) {
           
            scaleWidth = ((float) w / width);
            scaleHeight = ((float) w / width);
        } else {
            
            scaleWidth = ((float) w / width);
            scaleHeight = ((float) h / height);
        }
        matrix.postScale(scaleWidth, scaleHeight);
        Bitmap newbmp = Bitmap.createBitmap(oldbmp, 0, 0, width, height,
                matrix, true);
        return new BitmapDrawable(null, newbmp);
    }
 
    private Bitmap drawableToBitmap(Drawable drawable) {
        Bitmap bitmap = null;
        try {
            int width = drawable.getIntrinsicWidth();
            int height = drawable.getIntrinsicHeight();
            Bitmap.Config config = drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888
                    : Bitmap.Config.RGB_565;
            bitmap = Bitmap.createBitmap(width, height, config);
            Canvas canvas = new Canvas(bitmap);
            drawable.setBounds(0, 0, width, height);
            drawable.draw(canvas);
        } catch (Exception e) {
            // TODO: handle exception
            Toast.makeText(getApplicationContext(), "error:" + e.getMessage(),
                    Toast.LENGTH_SHORT).show();
        }

        return bitmap;
    }
  
    @Override
    protected void onDestroy() {
        // TODO Auto-generated method stub
        super.onDestroy();
        this.unregisterReceiver(myinfo);
        this.unregisterReceiver(updatenick);
        this.unregisterReceiver(updatesign);
        try {
            vcard.save(connection);
            } catch (XMPPException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            }
        
    }
    
    class Myinfo extends BroadcastReceiver{

        @Override
        public void onReceive(Context context, Intent intent) {
            Bundle bundle = getResultExtras(true);
            String tv_name1= bundle.getString("tv_name");
            String sex= bundle.getString("sex");
            String iv_avater= bundle.getString("iv_avater"); 
            tv_sex.setText(sex); 
            tv_name.setText(iv_avater);  
             Uri uri= Uri.parse(iv_avater);  
            imageView.setImageURI(uri);           
        }        
    }
    
    class UpdateNick extends BroadcastReceiver{

        @Override
        public void onReceive(Context context, Intent intent) {
        	Log.i("TAG", "广播已经接受到了");
            Bundle bundle=intent.getExtras();
            String nickname= bundle.getString("nickname");
            tv_name.setText(nickname);
            cv.put("nickname", nickname);
            dbContext.update(cv,relaccount); 
            vcard.setNickName(nickname);
        }   
    }
    
    class UpdateSign extends BroadcastReceiver{

        @Override
        public void onReceive(Context context, Intent intent) {
        	Log.i("TAGtt", "广播已经接受到了");
            Bundle bundle=intent.getExtras();
            String sign= bundle.getString("sign");
            tv_sign.setText(sign);
            cv.put("sign", sign);
            dbContext.update(cv,relaccount);
            vcard.setEmailWork((sign));  
        } 
    } 
}
