package com.weidi.fragment;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.jivesoftware.smack.Roster;
import org.jivesoftware.smack.RosterEntry;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.util.StringUtils;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.TextView;

import com.weidi.QApp;
import com.weidi.R;
import com.weidi.activity.ChatActivity;
import com.weidi.bean.Child;
import com.weidi.common.CharacterParser;
import com.weidi.common.ClearEditText;
import com.weidi.common.PinyinComparator;
import com.weidi.common.SideBar;
import com.weidi.common.SideBar.OnTouchingLetterChangedListener;
import com.weidi.common.SortAdapter;
import com.weidi.common.SortModel;
import com.weidi.common.base.BaseFragment;
import com.weidi.util.Const;
import com.weidi.util.Logger;
import com.weidi.util.ToastUtil;
import com.weidi.util.XmppUtil;

/**
 * @author luochangdong E-mail: 2270333671@qq.com
 * @date 创建时间：2015-6-8 下午5:19:17
 * @Description 1.0
 */
public class NewConstactFragment extends BaseFragment {
	private static String TAG = "NewConstactFragment";
	private ListView sortListView;
	private SideBar sideBar;
	private TextView dialog;
	private SortAdapter adapter;
	private ClearEditText mClearEditText;
	private List<Child> mFirend;
	private TextView tvTotal;
	private FriendsOnlineStatusReceiver friendsOnlineStatusReceiver;
	private Context mContext;
	/**
	 * 汉字转换成拼音的类
	 */
	private CharacterParser characterParser;
	private List<SortModel> sourceDateList;

	/**
	 * 根据拼音来排列ListView里面的数据类
	 */
	private PinyinComparator pinyinComparator;

	@Override
	protected void initView(Bundle savedInstanceState) {
		setRootView(R.layout.frag_constact);

		mContext = getActivity();
		friendsOnlineStatusReceiver = new FriendsOnlineStatusReceiver();
		IntentFilter intentFilter = new IntentFilter(
				Const.ACTION_FRIENDS_ONLINE_STATUS_CHANGE);
		mContext.registerReceiver(friendsOnlineStatusReceiver, intentFilter);
		// 实例化汉字转拼音类
		characterParser = CharacterParser.getInstance();

		pinyinComparator = new PinyinComparator();

	

		sortListView = (ListView) mRootView
				.findViewById(R.id.country_lvcountry);
		dialog = (TextView) mRootView.findViewById(R.id.dialog);
		sideBar = (SideBar) mRootView.findViewById(R.id.sidrbar);
		sideBar.setTextView(dialog);
		// 通讯录页眉页脚
		LayoutInflater infalter = LayoutInflater.from(mContext);
		View headView = infalter.inflate(R.layout.item_contact_list_header,
				null);
		sortListView.addHeaderView(headView);
		View footerView = infalter.inflate(R.layout.item_contact_list_footer,
				null);
		sortListView.addFooterView(footerView);
		// SourceDateList =
		// filledData(getResources().getStringArray(R.array.date));
		tvTotal = (TextView) footerView.findViewById(R.id.tv_total);
		mClearEditText = (ClearEditText) mRootView
				.findViewById(R.id.filter_edit);

			initData();
		
		// 根据a-z进行排序源数据
		Collections.sort(sourceDateList, pinyinComparator);
		tvTotal.setText(String.valueOf(sourceDateList.size()) + "位联系人");
		adapter = new SortAdapter(mApp, sourceDateList);
		sortListView.setAdapter(adapter);
	}

	@Override
	protected void setListener() {
		// 设置右侧触摸监听
		sideBar.setOnTouchingLetterChangedListener(new OnTouchingLetterChangedListener() {

			@Override
			public void onTouchingLetterChanged(String s) {
				// 该字母首次出现的位置
				int position = adapter.getPositionForSection(s.charAt(0));
				if (position != -1) {
					sortListView.setSelection(position);
				}

			}
		});
		//
		sortListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// 这里要利用adapter.getItem(position)来获取当前position所对应的对象
				Intent intent = new Intent(mContext, ChatActivity.class);
				if (position != 0 && position != sourceDateList.size() + 1) {
					intent.putExtra("from", ((SortModel) adapter
							.getItem(position - 1)).getName());
					startActivity(intent);
				}

			}
		});
      
		// 根据输入框输入值的改变来过滤搜索
		mClearEditText.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				// 当输入框里面的值为空，更新为原来的列表，否则为过滤数据列表
				filterData(s.toString());
			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {

			}

			@Override
			public void afterTextChanged(Editable s) {
			}
		});


	}

	/**
	 * 为ListView填充数据
	 * 
	 * @param data
	 * @return
	 */
	private List<SortModel> filledData(List<String> data) {
		List<SortModel> mSortList = new ArrayList<SortModel>();

		for (int i = 0; i < data.size(); i++) {
			SortModel sortModel = new SortModel();
			sortModel.setName(data.get(i));
			// 汉字转换成拼音
			String pinyin = characterParser.getSelling(data.get(i));
			String sortString = pinyin.substring(0, 1).toUpperCase();

			// 正则表达式，判断首字母是否是英文字母
			if (sortString.matches("[A-Z]")) {
				sortModel.setSortLetters(sortString.toUpperCase());
			} else {
				sortModel.setSortLetters("#");
			}

			mSortList.add(sortModel);
		}
		return mSortList;

	}

	/**
	 * 根据输入框中的值来过滤数据并更新ListView
	 * 
	 * @param filterStr
	 */
	private void filterData(String filterStr) {
		List<SortModel> filterDateList = new ArrayList<SortModel>();

		if (TextUtils.isEmpty(filterStr)) {
			filterDateList = sourceDateList;
		} else {
			filterDateList.clear();
			for (SortModel sortModel : sourceDateList) {
				String name = sortModel.getName();
				if (name.indexOf(filterStr.toString()) != -1
						|| characterParser.getSelling(name).startsWith(
								filterStr.toString())) {
					filterDateList.add(sortModel);
				}
			}
		}

		// 根据a-z进行排序
		Collections.sort(filterDateList, pinyinComparator);
		tvTotal.setText(String.valueOf(sourceDateList.size()) + "位联系人");
		adapter.updateListView(filterDateList);

	}

	@Override
	protected void handleMsg(Message msg) {
		switch (msg.what) {
		case 1:
			initData();
			tvTotal.setText(String.valueOf(sourceDateList.size()) + "位联系人");
           adapter.updateListView(sourceDateList);
			break;
		}
	}

	@Override
	protected void afterViews(Bundle savedInstanceState) {

	}

	private void initData() {
		XMPPConnection conn = QApp.xmppConnection;
		if(conn == null)
			return;
		Roster roster = conn.getRoster();
		List<RosterEntry> entries = XmppUtil.getAllEntries(roster);

		List<String> firendData = new ArrayList<String>();
		for (RosterEntry entry : entries) {
			Logger.i(TAG, entry.getUser() + "type:" + entry.getType().name());
			if (entry.getType().name().equals("both")) {

				firendData.add(StringUtils.parseName(entry.getUser()));
				Logger.i(TAG, entry.getUser());

			}
		}
		sourceDateList = new ArrayList<SortModel>();
		if (firendData.size() > 0) {
			sourceDateList = filledData(firendData);
			Logger.i(TAG, "好友数量=" + sourceDateList.size());
		} else {
			ToastUtil.showShortToast(mContext, "暂无好友");
		}

		Logger.i(TAG, entries.toString());
	}

	class FriendsOnlineStatusReceiver extends BroadcastReceiver {
		@Override
		public void onReceive(Context arg0, Intent intent) {
			String from = intent.getStringExtra("from");
			int status = intent.getIntExtra("status", 0);
			if (!TextUtils.isEmpty(from)) {
				if (status == 1) {
					ToastUtil.showShortToast(mApp, from + "上线了");
				} else if (status == 0) {
					ToastUtil.showShortToast(mApp, from + "下线了");
				}
			}
			new Handler().postDelayed(new Runnable() {
				@Override
				public void run() {

					mHandler.sendEmptyMessage(1);

				}
			}, 1000);
		}
	}

}
